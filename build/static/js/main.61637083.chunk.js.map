{"version":3,"sources":["firebase.js","NewJob.js","FirebaseJobList.js","NewUserForms.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","NewJob","props","state","visible","itemInWishList","itemAlreadyInList","idWishlist","titleWishlist","companyWishlist","jobUrlWishlist","thisId","jobTitle","company","jobUrl","this","setState","database","ref","passUserId","once","then","snapshot","child","exists","setTimeout","set","jobKey","showThisId","idCliked","keyId","category","time","description","contract","classIndex","className","parse","onClick","showData","addToWishlist","disabled","dateTime","split","href","Component","FirebaseJobList","removeJobFromWishlist","id","remove","dataFromFirebase","prevProps","prevState","on","response","firebaseData","data","val","key","push","dataFirebase","map","eachWishlistJob","aria-label","icon","faTimesCircle","NewUserForms","handleChangeNewUser","event","passwordsSame","errorMessage","value","target","handleSubmitNewUser","preventDefault","password","passwordConfirm","auth","createUserWithEmailAndPassword","email","user","showRegister","catch","error","message","handleChangeLogIn","handleSubmitLogIn","signInWithEmailAndPassword","email2","password2","errorLogIn","showLogIn","showLogInForm","hideForms","cancelRegister","signedOut","type","faSignInAlt","size","onSubmit","aria-live","htmlFor","name","placeholder","required","onChange","App","handleChange","selectedOption","handleChangeForm","handleSubmit","keywordsConverted","replaceAll","replace","previousKeywords","showEnteredKeywords","pageNum","removeKeywords","pageCountFunc","keywordCountValue","maxPageCount","Math","ceil","count","nextPage","prevButtonDisabled","previousPage","nextButtonDisabled","reloadPage","window","location","reload","logOut","signOut","errorLogOut","usersEmail","showErrorMessage","noFieldsErrorMessage","showPageCount","countryList","allJobs","label","pageCount","bind","onAuthStateChanged","uid","userLoggedIn","axios","method","url","responseType","areaArray","i","locations","length","area","display_name","err","jobsSelected","results","class","faPowerOff","options","theme","borderRadius","colors","primary25","primary","faArrowAltCircleLeft","aria-hidden","faArrowAltCircleRight","faSearch","eachJob","title","contract_type","created","redirect_url","inFirebase","itemInFirebase","passSelectedOption","passKeywordsConverted","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.61637083.chunk.js","sourcesContent":["// firebase.js\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport 'firebase/auth';\r\n\r\n// Initialize Firebase\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAbfxQEJtNgZRkJUgvkv7nJOwcZzoR2A-o\",\r\n    authDomain: \"project5-2f3c6.firebaseapp.com\",\r\n    projectId: \"project5-2f3c6\",\r\n    storageBucket: \"project5-2f3c6.appspot.com\",\r\n    messagingSenderId: \"693020103862\",\r\n    appId: \"1:693020103862:web:a1335a3545f882c8eac217\",\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n// this exports the CONFIGURED version of firebase\r\nexport default firebase;\r\n","import { Component } from 'react';\r\nimport parse from 'html-react-parser';\r\nimport firebase from './firebase';\r\n\r\n\r\nclass NewJob extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            visible: false,\r\n            itemInWishList: false,\r\n            itemAlreadyInList: false, \r\n            idWishlist: '',\r\n            titleWishlist: '',\r\n            companyWishlist: '',\r\n            jobUrlWishlist: '',\r\n        }\r\n    }\r\n\r\n\r\n    // Add a job to Wish List Firebase\r\n    addToWishlist(thisId, jobTitle, company, jobUrl) {\r\n        if (!company || company == \"\") {company = \"---\"}\r\n        if (!jobTitle || jobTitle == \"\") { jobTitle = \"---\" }\r\n        if (!jobUrl || jobUrl == \"\") { jobUrl = `<a href=\"#\"></a>` }\r\n            this.setState({\r\n                idWishlist: thisId,\r\n                titleWishlist: jobTitle, \r\n                companyWishlist: company,\r\n                jobUrlWishlist: jobUrl,\r\n                itemInWishList: false,\r\n                itemAlreadyInList: false\r\n            }, () => {\r\n                    // Check if the job is already on the Wish list\r\n                    const ref = firebase.database().ref(`${this.props.passUserId}`);\r\n                    ref.once(\"value\")\r\n                        .then((snapshot) => {\r\n                            let itemIsAlreadyInWishlist = snapshot.child(`${idWishlist}`).exists();\r\n                            //true or false\r\n                            // Show a message if job was added or is already on the list, hide after a while\r\n                            if (itemIsAlreadyInWishlist) {\r\n                                this.setState({\r\n                                    itemAlreadyInList: true\r\n                                });\r\n                                setTimeout(() => {\r\n                                    this.setState({\r\n                                        itemAlreadyInList: false\r\n                                    });\r\n                                }, 2000);\r\n                            }\r\n                            else {\r\n                                this.setState({\r\n                                    itemInWishList: true\r\n                                });\r\n                                setTimeout(() => {\r\n                                    this.setState({\r\n                                        itemInWishList: false\r\n                                    });\r\n                                }, 2500);\r\n                            }\r\n                        });\r\n                    // If id exists in Firebase, don't add new item\r\n                    const { idWishlist, titleWishlist, companyWishlist, jobUrlWishlist } = this.state;\r\n                    const firebaseRef = firebase.database().ref(`${this.props.passUserId}`).child(idWishlist);\r\n                    firebaseRef.set({\r\n                        jobKey: idWishlist,\r\n                        jobTitle: titleWishlist,\r\n                        company: companyWishlist,\r\n                        jobUrl: jobUrlWishlist,\r\n                    });\r\n                });\r\n    }\r\n\r\n    // Show more info on button click\r\n    showData(showThisId) {\r\n        this.setState({\r\n            visible: !this.state.visible,\r\n            idCliked: showThisId\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { keyId, jobTitle, company, category, time, description, jobUrl, contract, classIndex } = this.props;\r\n        return (\r\n            <div className={classIndex} >\r\n                {/* Show message if item was added or is already on the list */}\r\n                <div className=\"wishListManage\">\r\n                    {this.state.itemInWishList ? <h6>item added</h6> : null}\r\n                    {this.state.itemAlreadyInList ? <h6>item is already on list</h6> : null}\r\n                </div>\r\n                {/* Use PARSE to avoid <strong> tags comming from API */}\r\n                {/* Ensure that fields exist */}\r\n                {/* Adjust empty fields */}\r\n                {/* If category is Unknown, don't show it on the page */}\r\n                <div className=\"jobDescription\">\r\n                    <div className=\"title\">\r\n                        {jobTitle && jobTitle !== \"\" ? <h2>{parse(jobTitle)}</h2> : <h2>Other Jobs</h2>}\r\n                        {category !== \"Unknown\" && category && category !== \"\" ? <h5>{parse(category)}</h5> : null}\r\n                    </div>\r\n                    <div className=\"company\">\r\n                        {company && company !== \"\" ? <h3>{parse(company)}</h3> : <h3>---</h3>}\r\n                        {contract && contract !== \"\" ? <h4>{parse(contract)}</h4> : null}\r\n                    </div>\r\n                    <div className=\"buttonsInfo\">\r\n                        {/* Show/Hide Description on Button Click */}\r\n                        <button className=\"showDetails\" onClick={() => this.showData(keyId)}>{this.state.visible ? 'Hide Details' : 'Show Details'}</button>\r\n                        {/* Add to Wish List Button, show onl when logged in, otherise a message */}\r\n                        {(this.props.passUserId != null ? <button className=\"saveForLater\" onClick={() => this.addToWishlist(keyId, jobTitle, company, jobUrl)}>Save For Later</button> : <button className=\"saveForLater disabledButton\" disabled>Sign In to use Wish List</button> )}\r\n                    </div>\r\n                </div>\r\n                {this.state.visible && this.state.idCliked == keyId ? \r\n                <div className=\"description\">\r\n                    <div>\r\n                        {description && description !== \"\" ? <p>{parse(description)}</p> : <p>No Description</p>}\r\n                        {time && time !== \"\" ? <time dateTime={time.split('T')[0]}>Date Created: {time.split('T')[0]}</time> : null}\r\n                    </div>\r\n                        {jobUrl && jobUrl !== \"\" ? <a href={jobUrl}>Read More & Apply</a> : null }\r\n                </div> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NewJob;","import { Component } from 'react';\r\nimport firebase from './firebase';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTimesCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport parse from 'html-react-parser';\r\n\r\nclass FirebaseJobList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            dataFromFirebase: []\r\n        }\r\n    }\r\n\r\n\r\n    // Get data from Firebase when log in changes\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevProps.passUserId !== this.props.passUserId ) {\r\n            // Get current Wish List\r\n            // Variable that holds a reference to our database\r\n            const dbRef = firebase.database().ref(`${this.props.passUserId}`);\r\n            dbRef.on('value', (response) => {\r\n                // store the new state we want to introduce to our app\r\n                const firebaseData = [];\r\n                // response from our query to Firebase inside of a variable .val() \r\n                const data = response.val();\r\n                // data is an object, so we iterate through it using a for in loop to access each job, push each job to an array\r\n                for (let key in data) {\r\n                    firebaseData.push({ key: key, dataFirebase: data[key] });\r\n                }\r\n                this.setState ({\r\n                    dataFromFirebase: firebaseData\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    // remove Job from Wish List\r\n    removeJobFromWishlist = (id) => {\r\n        // create a reference to the database \r\n        const dbRef = firebase.database().ref(`${this.props.passUserId}`);\r\n        // using the Firebase methods .child(). & remove(), we remove the node specific to the event\r\n        dbRef.child(id).remove();\r\n    }\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <ul className=\"wishList\">\r\n                {/* MAP through the array and display each Wish List Job */}\r\n                {this.state.dataFromFirebase.map((eachWishlistJob) => {\r\n                    return (\r\n                        <li className=\"eachWish\" key={eachWishlistJob.key}>\r\n                            <div className=\"closeButtonWish\">\r\n                                <button className=\"removeFromWishlist\" onClick={() => this.removeJobFromWishlist(eachWishlistJob.key)} aria-label=\"Close sign in form\"><FontAwesomeIcon icon={faTimesCircle} /></button>\r\n                            </div>\r\n                            {eachWishlistJob.dataFirebase.jobTitle && eachWishlistJob.dataFirebase.jobTitle !== \"\" ? <h2>{parse(eachWishlistJob.dataFirebase.jobTitle)}</h2>  : <h2>---</h2>}\r\n                            {eachWishlistJob.dataFirebase.company && eachWishlistJob.dataFirebase.company !== \"\" ? <h3>{parse(eachWishlistJob.dataFirebase.company)}</h3> : <h3>---</h3>}\r\n                            {eachWishlistJob.dataFirebase.jobUrl && eachWishlistJob.dataFirebase.jobUrl !== \"\" ? <a href={eachWishlistJob.dataFirebase.jobUrl}>Apply Here</a> : <p>---</p>}\r\n                        </li>\r\n                    );\r\n                })\r\n                }\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FirebaseJobList;","import { Component } from 'react';\r\nimport firebase from './firebase';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSignInAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { faTimesCircle } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\nclass NewUserForms extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            // New User\r\n            email: '',\r\n            password: '',\r\n            passwordConfirm: '',\r\n            // Log In\r\n            email2: '',\r\n            password2: '',\r\n            // Error messages\r\n            passwordsSame: true,\r\n            errorMessage: '',\r\n            signedOut: false,\r\n            errorLogIn: false,\r\n            showLogInForm: false,\r\n            showRegister: false,\r\n        }\r\n    }\r\n\r\n    // Enter New User\r\n    handleChangeNewUser = (event) => {\r\n        // Hide error messages\r\n        this.setState({\r\n            passwordsSame: true,\r\n            errorMessage: ''\r\n        });\r\n        // store event.target.value in a constant\r\n        const value = event.target.value;\r\n        this.setState({\r\n            // target each propery by the input's id and set it to the value stored in the constant\r\n            [event.target.id]: value\r\n        });\r\n    }\r\n\r\n    // Submit New User\r\n    handleSubmitNewUser = (event) => {\r\n        event.preventDefault();\r\n        // Check if passwords are same, create a new user or show an error\r\n        if (this.state.password === this.state.passwordConfirm) {\r\n            firebase.auth().createUserWithEmailAndPassword(this.state.email, this.state.password)\r\n                .then((user) => {\r\n                    this.setState({\r\n                        email: '',\r\n                        password: '',\r\n                        passwordConfirm: '',\r\n                        showRegister: false\r\n                    });\r\n                })\r\n                .catch((error) => {\r\n                    // Use this error code for extra info:\r\n                    // const errorCode = error.code;\r\n                    this.setState({\r\n                        errorMessage: error.message,\r\n                        showRegister: true,\r\n                    });\r\n                });\r\n        }\r\n        else {\r\n            this.setState({\r\n                passwordsSame: false\r\n            });\r\n        }\r\n    }\r\n\r\n    // Log In field change\r\n    handleChangeLogIn = (event) => {\r\n        // store event.target.value in a constant\r\n        const value = event.target.value;\r\n        this.setState({\r\n            // target each propery by the input's id and set it to the value stored in the constant\r\n            [event.target.id]: value,\r\n            errorLogIn: ''\r\n        });\r\n    }\r\n\r\n    // Log in submit\r\n    handleSubmitLogIn = (event) => {\r\n        event.preventDefault();\r\n        firebase.auth().signInWithEmailAndPassword(this.state.email2, this.state.password2)\r\n            .then((user) => {\r\n                this.setState({\r\n                    email2: '',\r\n                    password2: '',\r\n                });\r\n            })\r\n            .catch((error) => {\r\n                // Use this error code for extra info:\r\n                // const errorCode = error.code;\r\n                this.setState ({\r\n                    errorLogIn: error.message\r\n                });\r\n            });\r\n    }\r\n\r\n    // Show Log in/register forms\r\n    showLogIn = (event) => {\r\n        event.preventDefault();\r\n        this.setState({\r\n            showLogInForm: true\r\n        });\r\n    }\r\n\r\n    // Hide Log in/Register forms\r\n    hideForms = (event) => {\r\n        event.preventDefault();\r\n        this.setState({\r\n            showLogInForm: false,\r\n            showRegister: false,\r\n            errorMessage: '',\r\n            errorLogIn: '',\r\n            passwordsSame: true,\r\n            email: '',\r\n            password: '',\r\n            passwordConfirm: '',\r\n            email2: '',\r\n            password2: '',\r\n        });\r\n    }\r\n\r\n    // Show Register form\r\n    showRegister = (event) => {\r\n        event.preventDefault();\r\n        this.setState({\r\n            showRegister: true,\r\n            email2: '',\r\n            password2: '',\r\n            errorLogIn: ''\r\n        });\r\n    }\r\n\r\n    // Show Register form\r\n    cancelRegister = (event) => {\r\n        event.preventDefault();\r\n        this.setState({\r\n            showRegister: false,\r\n            errorMessage: '',\r\n            passwordsSame: true,\r\n            email: '',\r\n            password: '',\r\n            passwordConfirm: '',\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* Button to show Log In form */}\r\n                <button type=\"submit\" onClick={this.showLogIn} aria-label=\"Sign In\"><FontAwesomeIcon icon={faSignInAlt} size=\"3x\" /></button>\r\n                {this.state.showLogInForm && <div className=\"registerFields\">\r\n                    {/* Hide Log In */}\r\n                    <button type=\"submit\" onClick={this.hideForms} className=\"closeForm\" aria-label=\"Close sign in form\"><FontAwesomeIcon icon={faTimesCircle} size=\"3x\" /></button>\r\n                    {/* Sign In form */}\r\n                    <h2>Sign In</h2>\r\n                    {!this.state.showRegister && <div><form onSubmit={this.handleSubmitLogIn} aria-live=\"polite\">\r\n                        {/* // On change run the function to update the state */}\r\n                        <label htmlFor=\"email2\" className=\"srOnly\">Email Address</label>\r\n                        <input type=\"email\" id=\"email2\" name=\"inputForm2\" value={this.state.email2} placeholder=\"Email Address\" required onChange={this.handleChangeLogIn} />\r\n\r\n                        <label htmlFor=\"password2\" className=\"srOnly\">Password</label>\r\n                        <input type=\"password\" id=\"password2\" name=\"inputForm2\" value={this.state.password2} placeholder=\"Password\" required onChange={this.handleChangeLogIn} />\r\n\r\n                        <button type=\"submit\" className=\"registerButtons\">Sign In</button>\r\n                    </form>\r\n                    <p>or</p>\r\n                    <button type=\"submit\" onClick={this.showRegister} className=\"registerButtons\">Register New User</button></div>}\r\n                    {/* Register form */}\r\n                    {this.state.showRegister && <div><form onSubmit={this.handleSubmitNewUser} aria-live=\"polite\">\r\n                        {/* // On change run the function to update the state */}\r\n                        <label htmlFor=\"email\" className=\"srOnly\">Email Address</label>\r\n                        <input type=\"email\" id=\"email\" name=\"inputForm\" value={this.state.email} placeholder=\"Email Address\" required onChange={this.handleChangeNewUser} />\r\n\r\n                        <label htmlFor=\"password\" className=\"srOnly\">Password</label>\r\n                        <input type=\"password\" id=\"password\" name=\"inputForm\" value={this.state.password} placeholder=\"Password\" required onChange={this.handleChangeNewUser} />\r\n\r\n                        <label htmlFor=\"passwordConfirm\" className=\"srOnly\">Confirm Password:</label>\r\n                        <input type=\"password\" id=\"passwordConfirm\" name=\"inputForm\" value={this.state.passwordConfirm} placeholder=\"Confirm Password\" required onChange={this.handleChangeNewUser} />\r\n\r\n                        <button type=\"submit\" className=\"registerButtons\">Create User & Log In</button>\r\n                    </form>\r\n                    <button type=\"submit\" onClick={this.cancelRegister} className=\"return\">Go Back</button>\r\n                    </div>}\r\n                    {/* Error messages on Register or Log In */}\r\n                    <div className=\"logInErrors\">\r\n                        {!this.state.passwordsSame && <h6>Password doesn't match!</h6>}\r\n                        {this.state.errorMessage !== '' && <h6>{this.state.errorMessage}</h6>}\r\n                        {this.state.errorLogIn && <h6>{this.state.errorLogIn}</h6>}\r\n                    </div>\r\n                </div>}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NewUserForms;","import './App.css';\r\nimport { Component } from 'react';\r\nimport axios from \"axios\";\r\nimport NewJob from \"./NewJob\";\r\nimport Select from 'react-select';\r\nimport FirebaseJobList from './FirebaseJobList';\r\nimport firebase from './firebase';\r\nimport NewUserForms from './NewUserForms';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\r\nimport { faArrowAltCircleRight } from '@fortawesome/free-solid-svg-icons';\r\nimport { faArrowAltCircleLeft } from '@fortawesome/free-solid-svg-icons';\r\nimport { faPowerOff } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      // Error messages\r\n      errorMessage: '',\r\n      showErrorMessage: false,\r\n      noFieldsErrorMessage: false,\r\n      showPageCount: true,\r\n      // Response data\r\n      countryList: [],\r\n      allJobs: [],\r\n      selectedOption: { value: '', label: 'All Toronto Area', count: 1, pageNum: 1 },\r\n      // Keyword values\r\n      value: '', // Current keyword chosen\r\n      keywordsConverted: '',\r\n      previousKeywords: '',\r\n      showEnteredKeywords: false,\r\n      // Page Count\r\n      pageCount: '',\r\n      maxPageCount: 1,\r\n      // Next/Previous buttons\r\n      nextButtonDisabled: false,\r\n      prevButtonDisabled: false,\r\n      // User Logged In\r\n      usersEmail: '',\r\n      signedOut: false,\r\n      errorLogOut: false,\r\n    }\r\n    // Dropdown menu Bind\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  //Start by loading all the newest jobs in all Toronto areas\r\n  componentDidMount() {\r\n    // onAuthStateChanged method.When a user successfully signs in, get information about the user in the observer.\r\n    firebase.auth().onAuthStateChanged((user) => {\r\n      if (user) {\r\n        // User is signed in, see docs for a list of available properties\r\n        // https://firebase.google.com/docs/reference/js/firebase.User\r\n        const uid = user.uid;\r\n        this.setState({\r\n          userLoggedIn: uid,\r\n          usersEmail: user.email\r\n        });\r\n        // ...\r\n      } else {\r\n        this.setState({\r\n          signedOut: true\r\n        })\r\n      }\r\n    });\r\n    // Get the list of all Toronto areas and upload them to the array to use for the dropdown menu\r\n    axios({\r\n      method: \"GET\",\r\n      url: `https://api.adzuna.com/v1/api/jobs/ca/geodata?app_id=18a606b4&app_key=35897d0612c0636126c9cdeddc06f44d&location0=Canada&location1=Ontario&location2=Toronto`,\r\n      responseType: \"json\",\r\n    }).then((response) => {\r\n      // Push data into areaArray, Toronto All is default\r\n      const areaArray = [{ value: '', label: 'All Toronto Area', count: 1, pageNum: 1 }];\r\n      for (let i = 0; i < response.data.locations.length; i++){\r\n        areaArray.push({ value: response.data.locations[i].location.area[3].replaceAll(\" \", \"%20\").replace(/^/, '&location3='), label: response.data.locations[i].location.display_name, count: response.data.locations[i].count, pageNum: 1 })\r\n      }\r\n      this.setState({\r\n        countryList: areaArray\r\n      });\r\n    }).catch(err => {\r\n      // Show Error message if no data is retrieved\r\n      this.setState({ \r\n        errorMessage: err.message,\r\n        showErrorMessage: true,\r\n        showPageCount: false\r\n      });\r\n    });\r\n      // Show data for all Toronto areas\r\n      axios({\r\n        method: \"GET\",\r\n        url: `https://api.adzuna.com/v1/api/jobs/ca/search/1?app_id=18a606b4&app_key=35897d0612c0636126c9cdeddc06f44d&results_per_page=50&location0=Canada&location1=Ontario&location2=Toronto&sort_by=date`,\r\n        responseType: \"json\",\r\n      }).then((response) => {\r\n          this.setState({\r\n            selectedOption: {\r\n              ...this.state.selectedOption,\r\n              count: response.data.count\r\n            }\r\n          })\r\n      }).catch(err => {\r\n        // Show Error message if no data is retrieved\r\n        this.setState({ \r\n            errorMessage: err.message,\r\n            showErrorMessage: true,\r\n            showPageCount: false\r\n          });\r\n      });\r\n  }\r\n\r\n\r\n  // New search if a value is selected from dropdown, keywords changed or next/previous page\r\n    componentDidUpdate(prevProps, prevState) {\r\n\r\n      // Do the update only when the previous/current state items don't match\r\n      if ((this.state.selectedOption !== prevState.selectedOption) || (this.state.keywordsConverted !== prevState.keywordsConverted)) {\r\n        // Do AXIOS every time the area, search keywords are changed or next/previous page\r\n        axios({\r\n          method: \"GET\",\r\n          url: `https://api.adzuna.com/v1/api/jobs/ca/search/${this.state.selectedOption.pageNum}?app_id=18a606b4&app_key=35897d0612c0636126c9cdeddc06f44d&results_per_page=50${this.state.keywordsConverted}&location0=Canada&location1=Ontario&location2=Toronto${this.state.selectedOption.value}&sort_by=date`,\r\n          responseType: \"json\",\r\n        }).then((response) => {\r\n          // Add classes to every object for styling\r\n          const jobsSelected = response.data.results;\r\n          for(let i=0; i < jobsSelected.length; i++){\r\n            if (i % 2 === 0) {\r\n              jobsSelected[i].class = \"jobListing classOne\";\r\n            }\r\n            else {\r\n              jobsSelected[i].class = \"jobListing classTwo\";\r\n            }\r\n          }\r\n          // Update Job list and page count// Show Page Count; hide error messages\r\n          this.setState({\r\n            allJobs: jobsSelected,\r\n            keywordCountValue: response.data.count,\r\n            showPageCount: true,\r\n            noFieldsErrorMessage: false,\r\n          });\r\n          // Deactivate Previous button if one page\r\n          if ((this.state.selectedOption.pageNum) == \"1\") {\r\n            this.setState({\r\n              prevButtonDisabled: true\r\n            })\r\n          }\r\n          // Run Page Count update function\r\n          this.pageCountFunc();\r\n          // Activate Next button if more than 1 page\r\n          if (this.state.maxPageCount > 1) {\r\n            this.setState({\r\n              nextButtonDisabled: false\r\n            })\r\n          }\r\n          // If max page number reached, disable Next button\r\n          if (this.state.selectedOption.pageNum == this.state.maxPageCount) {\r\n            this.setState({\r\n              nextButtonDisabled: true,\r\n            })\r\n          }\r\n          // Show error message when no data retrieved\r\n          if (response.data.count == 0) {\r\n            this.setState({\r\n              noFieldsErrorMessage: true,\r\n              showPageCount: false\r\n            })\r\n          }\r\n        }).catch(err => {\r\n          // Show error if AXIOS didn't work\r\n          this.setState({ \r\n            errorMessage: err.message,\r\n            showErrorMessage: true,\r\n            showPageCount: false\r\n          });\r\n        });\r\n      }\r\n    }\r\n\r\n\r\n\r\n  // Handle Dropdown Menu change\r\n  handleChange = selectedOption => {\r\n    this.setState({ \r\n      selectedOption \r\n    });\r\n  };\r\n\r\n  // On Keyword Input field Change target the state\r\n  handleChangeForm=(event)=> { \r\n    this.setState({ \r\n      value: event.target.value\r\n    }); \r\n  }\r\n\r\n  // On Keyword Form Submit:\r\n  handleSubmit = (event)=> {\r\n    // Prevent Default\r\n    event.preventDefault();\r\n    // Check if the field is not empty. \r\n    // If it's not empty, create a field for API call and a field for comparison; empty the input; update starting page count\r\n    if (this.state.value !== \"\") {\r\n      this.setState({ \r\n        keywordsConverted: this.state.value.replaceAll(\" \", \"%20\").replace(/^/, '&what='), \r\n        previousKeywords: this.state.value, \r\n        value: '',\r\n        showEnteredKeywords: true,\r\n        selectedOption: {\r\n          ...this.state.selectedOption,\r\n            pageNum: 1\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  // Remove keywords button (update all fields, clear values)\r\n  removeKeywords = (event) => {\r\n    // Prevent Default\r\n    event.preventDefault();\r\n    this.setState({\r\n      value: '',\r\n      keywordsConverted: '',\r\n      previousKeywords: '',\r\n      showEnteredKeywords: false,\r\n      selectedOption: {\r\n        ...this.state.selectedOption,\r\n          pageNum: 1\r\n      }\r\n    })\r\n  }\r\n\r\n  // Count pages (depending if keywords are entered or no keywords use different setState vales)\r\n  pageCountFunc = ()=>{\r\n    if (this.state.keywordCountValue > 0){\r\n      this.setState({\r\n        maxPageCount: Math.ceil(this.state.keywordCountValue / 50)\r\n      })\r\n    }\r\n    else {\r\n      this.setState({\r\n        maxPageCount: Math.ceil(this.state.selectedOption.count / 50)\r\n      })\r\n    }\r\n  }\r\n\r\n  // Next Page Button\r\n  nextPage = (event) => {\r\n    // Prevent Default\r\n    event.preventDefault();\r\n    // Show Previous button\r\n    this.setState({\r\n      prevButtonDisabled: false\r\n    })\r\n    // Update page numbers\r\n    if ((this.state.selectedOption.pageNum + 1) <= this.state.maxPageCount) {\r\n      this.setState(prevState => ({\r\n        selectedOption: {\r\n          ...prevState.selectedOption,\r\n          pageNum: this.state.selectedOption.pageNum + 1 \r\n        }\r\n      }))\r\n    }\r\n  }\r\n\r\n  // Previous Page Button\r\n  previousPage = (event) => {\r\n    // Prevent Default\r\n    event.preventDefault();\r\n    // Show NEXT button\r\n    this.setState({\r\n      nextButtonDisabled: false\r\n    })\r\n    // Update page numbers\r\n    if ((this.state.selectedOption.pageNum - 1) > 0){\r\n      this.setState(prevState => ({\r\n        selectedOption: {\r\n          ...prevState.selectedOption,\r\n          pageNum: this.state.selectedOption.pageNum - 1\r\n        }\r\n      }))\r\n    }\r\n  }\r\n\r\n  // Reload page if error\r\n  reloadPage = () => {\r\n    window.location.reload();\r\n  }\r\n\r\n  // Log Out\r\n  logOut = () => {\r\n    firebase.auth().signOut().then(function () {\r\n      // Sign-out successful.\r\n      window.location.reload();\r\n    }).catch(function (error) {\r\n      // An error happened.\r\n      this.setState({\r\n        errorLogOut: true,\r\n        usersEmail: ''\r\n      });\r\n    });\r\n  }\r\n\r\n  // Display data\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        {/* Show error message if AXIOS didn't work, button to reload the page */}\r\n        {this.state.showErrorMessage && <div className=\"blockView\">\r\n          <div className=\"error\">\r\n            <h6>Sorry... Something went wrong, not all data can be retrieved.</h6>\r\n            <button onClick={this.reloadPage}>Try again!</button>\r\n            <p>{this.state.errorMessage}</p>\r\n          </div>\r\n        </div>}\r\n        <header>\r\n              <div className=\"wrapper\">\r\n                <div className=\"logIn\">\r\n                  {/* <NewUserForms /> */}\r\n                  {/* Log In / Add New User forms */}\r\n                  <h1>Find Your Job In Toronto</h1>\r\n                  <div className=\"logInFields\">\r\n                    {/* User Logged In */}\r\n                    {this.state.usersEmail ? <h5 className=\"signIn\">Logged in as {this.state.usersEmail}</h5> : null}\r\n                    {this.state.errorLogOut && <h5 className=\"signIn\">Log Out failed!</h5>}\r\n                    {/* Log In */}\r\n                    {!this.state.usersEmail && <h5 className=\"signIn\">Sign In</h5>}\r\n                    {!this.state.usersEmail ? <NewUserForms /> : null}\r\n                    {/* Log Out */}\r\n                    {this.state.usersEmail ? <button type=\"submit\" className=\"logOut\" onClick={this.logOut} aria-label=\"Log out\"><FontAwesomeIcon icon={faPowerOff} size=\"2x\" /></button> : null}\r\n                  </div>\r\n                </div>\r\n                <div className=\"searchFields\">\r\n                  <div className=\"citySearch\">\r\n                  {/* Using react-select package for the dropdown menu */}\r\n                    <Select\r\n                      value={this.state.selectedOption}\r\n                      onChange={this.handleChange}\r\n                      options={this.state.countryList}\r\n                      theme={theme => ({\r\n                        ...theme,\r\n                        borderRadius: 5,\r\n                        colors: {\r\n                          ...theme.colors,\r\n                          primary25: '#efa50e',\r\n                          primary: '#4e007a',\r\n                        }\r\n                      })}\r\n                    />\r\n                    {/* Next/Previous buttons (hidden if 0 search results)*/}\r\n                      {this.state.showPageCount &&\r\n                        <div className=\"nextPrevButtons\">\r\n                          <button type=\"submit\" onClick={this.previousPage} disabled={this.state.prevButtonDisabled} aria-label=\"previous page\"><FontAwesomeIcon icon={faArrowAltCircleLeft} aria-hidden=\"true\" /></button>\r\n                          <p className=\"pageCount\">{`${this.state.selectedOption.pageNum} of ${this.state.maxPageCount}`} </p>\r\n                          <button type=\"submit\" onClick={this.nextPage} disabled={this.state.nextButtonDisabled} aria-label=\"Next page\"><FontAwesomeIcon icon={faArrowAltCircleRight} aria-hidden=\"true\" /></button>\r\n                        </div>}\r\n                  </div>\r\n                  {/* Search by keywords form */}\r\n                  <div className=\"keywords\">\r\n                    <form className=\"keywordForm\">\r\n                      <label htmlFor=\"searchBy\" className=\"srOnly\">Search by job title, keywords, or company</label>\r\n                      <input id=\"searchBy\" type=\"text\" value={this.state.value} onChange={this.handleChangeForm} placeholder=\"Job title,  keywords, or company\"/>\r\n                      <button type=\"submit\" onClick={this.handleSubmit} aria-label=\"Search\"><FontAwesomeIcon icon={faSearch} size=\"2x\" /></ button>\r\n                    </form>\r\n                    <div className=\"keywordsDiv\">\r\n                      {this.state.showEnteredKeywords && <div className=\"searchOptions\">\r\n                        <p>Current search by: \"{(this.state.previousKeywords)}\"</p>\r\n                        <button type=\"submit\" onClick={this.removeKeywords}>Clear Keywords</button>\r\n                      </div>}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n          </header>\r\n          {/* New Job list items // Imported from NewJob.js */}\r\n          <main className=\"wrapper\">\r\n            {/* Show error message if no search results */}\r\n            <section>\r\n              {this.state.noFieldsErrorMessage && <div className=\"errorNoResults\"><h6>No Search Results, please try again!</h6></div>}\r\n              <ul>\r\n                {\r\n                  this.state.allJobs.map((eachJob) => {\r\n                    return (\r\n                      <li key={eachJob.id}>\r\n                        <NewJob passUserId={this.state.userLoggedIn} \r\n                          keyId={eachJob.id}\r\n                          jobTitle={eachJob.title}\r\n                          company={eachJob.company.display_name}\r\n                          contract={eachJob.contract_type}\r\n                          category={eachJob.category.label}\r\n                          time={eachJob.created}\r\n                          description={eachJob.description}\r\n                          jobUrl={eachJob.redirect_url}\r\n                          classIndex={eachJob.class}\r\n                          inFirebase={eachJob.itemInFirebase}\r\n                        />\r\n                      </li>\r\n                    );\r\n                  })\r\n                }\r\n              </ul>\r\n            </section>\r\n            <aside>\r\n              {!this.state.userLoggedIn && <h5>Sign In To Add Items To Wish List</h5>}\r\n              {this.state.userLoggedIn && <h5>Saved Jobs</h5>}\r\n              <FirebaseJobList passUserId={this.state.userLoggedIn} passSelectedOption={this.state.selectedOption} passKeywordsConverted={this.state.keywordsConverted} />\r\n            </aside>\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <div> \r\n    <App />\r\n  </div>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}